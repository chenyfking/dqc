<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beagledata.gaea.workbench.mapper.KnowledgePackageMapper">
    <resultMap id="knowledgePackageResultMap" type="com.beagledata.gaea.workbench.entity.KnowledgePackage">
        <id property="id" column="id" />
        <result property="uuid" column="uuid" />
        <result property="createTime" column="create_time" />
        <result property="updateTime" column="update_time" />
        <result property="name" column="name" />
        <result property="description" column="description" />
        <result property="projectUuid" column="project_uuid" />
        <result property="microUuid" column="micro_uuid" />
        <result column="package_uuid" property="packageUuid" jdbcType="VARCHAR" />
        <result column="assets_uuid" property="assetsUuid" jdbcType="VARCHAR" />
        <result column="assets_version" property="assetsVersion" />
        <result column="baseline_version" property="baselineVersion" />
        <result column="audit_count" property="auditCount" />
        <association property="creator" javaType="User" resultMap="userResultMap" />
    </resultMap>

    <resultMap id="knowledgePackageResultMap2" type="com.beagledata.gaea.workbench.entity.KnowledgePackage">
        <id property="id" column="id" />
        <result property="uuid" column="id" />
        <result property="createTime" column="create_time" />
        <result property="updateTime" column="update_time" />
        <result property="name" column="name" />
        <result property="description" column="description" />
        <result property="projectUuid" column="projectUuid" />
        <collection column="uuid" property="baseLines" javaType="java.util.List" ofType="pkbaseLineMap" select="selectVersionsByPackageUuid" />
    </resultMap>

    <resultMap id="pkbaseLineMap" type="com.beagledata.gaea.workbench.entity.KnowledgePackageBaseline">
        <result property="uuid" column="uuid" />
        <result property="versionNo" column="version_no" />
    </resultMap>

    <resultMap id="userResultMap" type="User">
        <result property="username" column="username" />
        <result property="uuid" column="creator_uuid" />
    </resultMap>

    <resultMap id="BaseResultMap" type="com.beagledata.gaea.workbench.entity.Assets" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="uuid" property="uuid" jdbcType="CHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="description" property="description" jdbcType="VARCHAR" />
        <result column="type" property="type" jdbcType="VARCHAR" />
        <result column="project_uuid" property="projectUuid" jdbcType="CHAR" />
        <result column="content" property="content"/>
        <result column="projectId" property="projectId" jdbcType="INTEGER"/>
        <result column="version_no" property="versionNo" jdbcType="INTEGER"/>
        <result column="version_id" property="versionId" javaType="INTEGER" />
    </resultMap>

    <select id="selectReferenceKnowledgePackages" resultMap="knowledgePackageResultMap2">
        SELECT DISTINCT
            t1.uuid as uuid,
            t1.name,
            t1.description,
            t1.create_time
        FROM
            t_knowledge_package t1
        JOIN t_knowledge_package_assets t2 ON t1.uuid = t2.package_uuid
        WHERE
            !t1.is_deleted
        AND t2.assets_uuid = #{assetsUuid}
    </select>

    <select id="selectVersionsByPackageUuid" parameterType="java.lang.String" resultMap="pkbaseLineMap">
        SELECT uuid, version_no FROM t_knowledge_package_baseline WHERE package_uuid = #{uuid}
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_knowledge_package (uuid, create_time, update_time, name, description, project_uuid, creator_uuid, micro_uuid)
        VALUES (#{uuid}, NOW(), NOW(), #{name}, #{description}, #{projectUuid}, #{creator.uuid}, #{microUuid})
    </insert>

    <update id="delete">
        UPDATE t_knowledge_package
        SET update_time = NOW(), is_deleted = TRUE, delete_version = id
        WHERE uuid = #{uuid}
    </update>

    <update id="update">
        UPDATE t_knowledge_package
        <set>
            update_time = NOW()
            <if test="name != null and name != ''">
             , name = #{name}
            </if>
            <if test="description != null and description != ''">
             , description = #{description}
            </if>
            <if test="projectUuid != null and projectUuid != ''">
             , project_uuid = #{projectUuid}
            </if>
            <if test="microUuid != null and microUuid != ''">
              , micro_uuid = #{microUuid}
            </if>
        </set>
        WHERE uuid = #{uuid} AND !is_deleted
    </update>

    <update id="updateDeleted">
        UPDATE t_knowledge_package
        <set>
            create_time = NOW(),
            update_time = NOW(),
            is_delete_version = 0
            <if test="name != null and name != ''">
                ,name = #{name}
            </if>
            <if test="description != null and description != ''">
                ,description = #{description}
            </if>
            <if test="projectUuid != null and projectUuid != ''">
                ,project_uuid = #{projectUuid}
            </if>
            <if test="creator.uuid != null and creator.uuid != ''">
                ,creator_uuid = #{creator.uuid}
            </if>
        </set>
        WHERE uuid = #{uuid} AND is_deleted
    </update>

    <select id="selectAll" resultMap="knowledgePackageResultMap">
        SELECT t1.id, t1.uuid, t1.create_time, t1.update_time, t1.name, t1.description, t1.micro_uuid, t1.project_uuid, t1.name,
        (
          SELECT
            COUNT(*)
          FROM t_knowledge_package_baseline tkpb
          WHERE
            tkpb.state = '1'
            AND tkpb.package_uuid = t1.uuid AND !tkpb.is_deleted
        ) AS audit_count
        FROM t_knowledge_package t1
        WHERE !is_deleted AND project_uuid = #{projectUuid}
        ORDER BY audit_count DESC, update_time DESC
    </select>

    <select id="selectForPrj" resultMap="knowledgePackageResultMap">
        SELECT t1.id, t1.uuid, t1.create_time, t1.update_time, t1.name, t1.description
        FROM t_knowledge_package t1
        WHERE t1.project_uuid = #{projectUuid} AND !t1.is_deleted
        ORDER BY id DESC
    </select>

    <insert id="addKnowledgePackageAssets" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_knowledge_package_assets (package_uuid, assets_uuid, create_time, assets_version, baseline_version)
        VALUES (#{packageUuid}, #{assetsUuid}, NOW(), #{assetsVersion}, #{baselineVersion})
    </insert>

    <select id="selectKnowledgePackageAssets" resultMap="BaseResultMap">
        select ta.id, ta.uuid,tk.assets_version version_no, tav.create_time, ta.name, tav.version_desc description, ta.type
        from t_knowledge_package_assets tk JOIN t_assets ta ON tk.assets_uuid = ta.uuid INNER  JOIN t_assets_version tav ON tk.assets_uuid = tav.assets_uuid AND tk.assets_version = tav.version_no
        WHERE tk.package_uuid = #{uuid} AND tk.baseline_version = #{baselineVersion} AND !ta.is_deleted
        ORDER BY tk.create_time ASC
    </select>

    <delete id="deleteKnowledgePackageAssets">
        DELETE FROM t_knowledge_package_assets WHERE package_uuid = #{packageUuid} AND assets_uuid = #{assetsUuid}
    </delete>

    <select id="selectAssetsWithContent" resultMap="BaseResultMap">
        SELECT
            ta.id, ta.uuid, ta.name, ta.description, ta.type, ta.content
        FROM
            t_knowledge_package_assets tk JOIN t_assets ta ON tk.assets_uuid = ta.uuid
        WHERE tk.package_uuid = #{uuid} AND !ta.is_deleted
        ORDER BY tk.create_time ASC
    </select>

    <select id="selectAssetsVersionWithContent" resultMap="BaseResultMap">
        SELECT
            ta.id,
            ta.uuid,
            ta.NAME,
            ta.description,
            ta.type,
            tav.id AS version_id,
            tav.content,
            tav.version_no
        FROM
            t_knowledge_package_assets tk
            JOIN t_assets_version tav ON tk.assets_uuid = tav.assets_uuid AND tk.assets_version = tav.version_no
            JOIN t_assets ta ON tk.assets_uuid = ta.uuid
        WHERE tk.package_uuid = #{uuid} AND tk.baseline_version = #{baselineVersion} AND !tav.is_deleted AND !ta.is_deleted
        ORDER BY tk.create_time ASC
    </select>

    <select id="selectByUuid" resultMap="knowledgePackageResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.description, t1.project_uuid, t1.micro_uuid, t2.uuid as creator_uuid, t2.username
        FROM t_knowledge_package t1 LEFT JOIN t_user t2 ON t1.creator_uuid = t2.uuid
        WHERE t1.uuid = #{uuid} AND !t1.is_deleted
    </select>

    <select id="selectForRecentBlByUuid" resultMap="knowledgePackageResultMap">
         SELECT t1.id, t1.uuid, t1.name, t1.description, t1.project_uuid, t1.micro_uuid, t2.version_no as baseline_version
         FROM t_knowledge_package t1 LEFT JOIN t_knowledge_package_baseline t2 ON t1.uuid = t2.package_uuid
         WHERE t1.uuid= #{uuid} AND !t1.is_deleted AND !t2.is_deleted
         ORDER BY baseline_version DESC limit 1
    </select>

    <select id="selectTempByAssets" resultMap="knowledgePackageResultMap">
        SELECT t1.id, t1.uuid
        FROM t_knowledge_package t1, t_knowledge_package_assets t2
        WHERE t2.assets_uuid = #{assetsUuid} AND t1.project_uuid IS NULL AND t1.uuid = t2.package_uuid AND t2.assets_version =#{assetsVersion} AND t2.baseline_version =0
    </select>

    <insert id="insertBatch">
        INSERT INTO t_knowledge_package (uuid, create_time, name, description, project_uuid, creator_uuid)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.uuid}, NOW(), #{item.name}, #{item.description}, #{item.projectUuid},#{item.creator.uuid})
        </foreach>;
    </insert>

    <select id="selectPkgAssetsByProjectUuid" resultMap="knowledgePackageResultMap">
        SELECT t2.assets_uuid, t2.assets_version, t2.baseline_version, t2.package_uuid
        FROM t_knowledge_package t1, t_knowledge_package_assets t2
        WHERE t1.project_uuid = #{projectUuid} AND t1.uuid = t2.package_uuid
    </select>

    <select id="countPkgEffectiveBaseline" resultType="Integer">
        SELECT
            COUNT(*)
        FROM t_knowledge_package kp
            JOIN t_knowledge_package_baseline kpb ON kp.uuid = kpb.package_uuid
        WHERE
            kpb.state = 3 AND kp.uuid = #{uuid}
    </select>

    <select id="selectByNameAndProjectUuid" resultMap="knowledgePackageResultMap">
        SELECT * FROM t_knowledge_package WHERE name = #{name} AND project_uuid = #{projectUuid} AND !is_deleted
    </select>

    <select id="selectDeleteByPackageUuid" resultMap="knowledgePackageResultMap">
        SELECT * FROM t_knowledge_package WHERE uuid = #{packageUuid} AND is_deleted
    </select>

    <select id="selectProjectUuidByPkgUuid" resultType="java.lang.String">
        SELECT
            t2.uuid
         FROM
         t_knowledge_package t1
         INNER JOIN t_project t2.uuid = t1.project_uuid
         WHERE
            t1.uuid = #{packageUuid}
    </select>

    <update id="updateOnUploadBaseline">
        UPDATE t_knowledge_package
        SET name = #{name}, is_deleted = false , delete_version = 0
        WHERE
            uuid = #{uuid}
    </update>

    <select id="selectOnUploadBaseline" resultMap="knowledgePackageResultMap" flushCache="true">
        SELECT t1.id, t1.uuid, t1.name, t1.description, t1.project_uuid, t1.micro_uuid
        FROM t_knowledge_package t1
        WHERE t1.uuid = #{uuid}
    </select>
</mapper>