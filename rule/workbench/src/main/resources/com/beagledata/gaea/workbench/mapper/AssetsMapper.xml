<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.beagledata.gaea.workbench.mapper.AssetsMapper">
    <resultMap id="BaseResultMap" type="Assets">
        <id column="id" property="id" />
        <result column="uuid" property="uuid" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <result column="name" property="name" />
        <result column="en_name" property="enName"/>
        <result column="description" property="description" />
        <result column="content" property="content" />
        <result column="type" property="type" />
        <result column="project_uuid" property="projectUuid" />
        <result column="project_name" property="projectName"/>
        <result column="content" property="content"/>
        <result column="is_locked" property="lock"/>
        <result column="dir_parent_id" property="dirParentId"/>
        <result column="lock_time" property="lockTime"/>
        <result column="edit_time" property="editTime"/>
        <result column="version_id" property="versionId"/>
        <result column="version_no" property="versionNo"/>
        <result column="version_desc" property="versionDesc"/>
        <association property="locker" javaType="User" resultMap="lockerResultMap" />
        <association property="creator" javaType="User" resultMap="userResultMap" />
        <association property="editor" javaType="User" resultMap="editorResultMap" />
    </resultMap>

    <resultMap id="assetsTreeNodeVO" type="com.beagledata.gaea.workbench.vo.AssetsTreeNodeVO">
        <result column="uuid" property="uuid"/>
        <result column="leaf" property="leaf"/>
        <result column="label" property="label"/>
        <result column="type" property="type"/>
        <result column="locked" property="locked"/>
        <association property="editor" javaType="User" resultMap="editorResultMap" />
    </resultMap>

    <resultMap id="referenceResultMap" type="com.beagledata.gaea.workbench.vo.AssetsReferenceVO">
        <result column="uuid" property="uuid" />
        <result column="name" property="name" />
        <result column="type" property="type" />
        <result column="description" property="description" />
        <collection column="uuid" property="assetsVersions" javaType="java.util.List" ofType="assetsVersion" select="selectVersionsByAssetsUuid"/>
    </resultMap>

    <resultMap id="assetsVersion" type="com.beagledata.gaea.workbench.entity.AssetsVersion">
        <result column="assetUuid" property="assetUuid"/>
        <result column="assetsUuid" property="assetsUuid"/>
        <result column="content" property="content"/>
        <result column="create_time" property="createTime" />
        <result column="version_desc" property="versionDes" />
        <result column="version_no" property="versionNo"/>
    </resultMap>

    <resultMap id="FolderResultMap" type="Folder">
        <id property="id" column="id"/>
        <result property="uuid" column="uuid"/>
        <result property="createTime" column="create_time" />
        <result property="updateTime" column="update_time" />
        <result property="dirId" column="dir_id"/>
        <result property="dirName" column="dir_name"/>
        <result property="parentId" column="parent_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="projectUuid" column="project_uuid"/>
        <result property="locked" column="is_locked"/>
        <association property="creator" javaType="User" resultMap="userResultMap" />
    </resultMap>

    <resultMap id="userResultMap" type="User">
        <result property="realname" column="user_realname" />
        <result property="uuid" column="user_uuid" />
    </resultMap>

    <resultMap id="lockerResultMap" type="User">
        <result property="realname" column="lockerName" />
        <result property="uuid" column="lockerUuid" />
    </resultMap>

    <resultMap id="editorResultMap" type="User">
        <result property="realname" column="editor_realname" />
        <result property="uuid" column="editor_uuid" />
    </resultMap>

    <sql id="Base_Column_List">
        t1.id, t1.uuid, t1.create_time, t1.update_time, t1.name, t1.en_name, t1.description, t1.type, t1.project_uuid,  t1.is_locked, t1.locker
    </sql>

    <select id="selectByParams" resultMap="BaseResultMap">
        SELECT
          t1.id, t1.uuid, t1.create_time, t1.update_time, t1.name, t1.description, t1.type, t1.project_uuid,
          t1.dir_parent_id, t1.is_locked, t2.realname AS user_realname
        FROM t_assets t1 LEFT JOIN <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> t2 ON t1.creator_uuid = t2.uuid
        WHERE !t1.is_deleted
        <if test="projectUuid != null and projectUuid != ''">
            AND t1.project_uuid = #{projectUuid}
        </if>
        <if test="name != null and name != ''">
            AND t1.name LIKE concat('%',#{name},'%')
        </if>
        <if test="type != null and type != ''">
            AND t1.type LIKE concat('%',#{type},'%')
        </if>
        ORDER BY t1.update_time DESC, t1.id DESC
        <if test="params1 != null and params2 != null">
            LIMIT #{params1}, #{params2}
        </if>
    </select>

    <select id="selectCountByParams" resultType="int">
        SELECT COUNT(*)
        FROM t_assets
        WHERE  !is_deleted
        <if test="projectUuid != null and projectUuid != ''">
            AND project_uuid = #{projectUuid}
        </if>
        <if test="name != null and name != ''">
            AND name LIKE concat('%',#{name},'%')
        </if>
        <if test="type != null and type != ''">
            AND type LIKE concat('%',#{type},'%')
        </if>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_assets (create_time, uuid, project_uuid, name, en_name, content, description, type, creator_uuid, dir_parent_id, is_locked)
        VALUES (NOW(), #{uuid}, #{projectUuid}, #{name}, #{enName}, #{content}, #{description}, #{type}, #{creator.uuid}, #{dirParentId}, #{locked})
    </insert>

    <update id="update">
        UPDATE t_assets
        SET
            update_time = NOW()
            <if test="description != null and description != ''">
                ,description = #{description}
            </if>
            <if test="name != null and name != ''">
                ,name = #{name}
            </if>
            <if test="dirParentId != null and dirParentId != ''">
                ,dir_parent_id = #{dirParentId}
            </if>
            <if test="content != null">
                ,content = #{content}
            </if>
            <if test="enName != null and enName != ''">
                ,en_name = #{enName}
            </if>
        WHERE uuid = #{uuid} AND !is_locked AND !is_deleted
    </update>

    <update id="deleteByUuid">
        UPDATE t_assets
        SET update_time = NOW(), is_deleted = true, delete_version = id
        WHERE uuid = #{uuid} AND !is_locked;
        UPDATE t_assets_version
        SET update_time = NOW(), is_deleted = true, delete_version = id
        WHERE assets_uuid = #{uuid};
    </update>

    <update id="updateNowVersion">
        UPDATE t_assets
        SET now_version = #{nowVersion}, update_time = NOW()
        WHERE !is_deleted AND uuid = #{uuid} AND !is_locked
    </update>

    <select id="selectByUuid" resultMap="BaseResultMap">
        SELECT
            ta.id, ta.uuid, ta.lock_time, ta.create_time, ta.update_time, ta.is_locked, ta.dir_parent_id,
            ta.content, ta.name,ta.en_name, ta.description, ta.type, ta.project_uuid, tp.name AS project_name,
            tac.realname AS lockerName, tac.uuid AS lockerUuid, tu.uuid AS editor_uuid, tu.realname AS editor_realname, ta.edit_time
        FROM
            t_assets ta
            LEFT JOIN t_project tp ON tp.uuid = ta.project_uuid
            LEFT JOIN <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> tac ON tac.uuid = ta.locker
            LEFT JOIN <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> tu ON tu.uuid = ta.editor
            LEFT JOIN t_recycle_bin trb ON ta.uuid = trb.assets_uuid AND ta.type = trb.assets_type
        WHERE ta.uuid = #{uuid} AND (!ta.is_deleted OR (ta.is_deleted AND trb.uuid IS NOT null))
    </select>

    <select id="selectById" resultMap="BaseResultMap">
        SELECT
            ta.id, ta.uuid, ta.lock_time, ta.create_time,  ta.update_time, ta.is_locked,
            ta.content, ta.name, ta.description, ta.type, ta.project_uuid, tp.name AS project_name,
            tac.realname AS lockerName, tac.uuid AS lockerUuid
        FROM
            t_assets ta Left JOIN t_project tp ON tp.uuid = ta.project_uuid
            LEFT JOIN <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> tac on tac.uuid = ta.locker
        WHERE ta.id = #{id} AND !ta.is_deleted
    </select>

    <select id="selectByIdAndVersion" resultMap="BaseResultMap">
        <if test="versionNo == 0">
            SELECT
                ta.id, ta.uuid, ta.lock_time, ta.create_time, ta.update_time, ta.is_locked,
                ta.content, ta.name, ta.description, ta.type, ta.project_uuid, tp.name AS project_name,
                tac.realname AS lockerName, tac.uuid AS lockerUuid
            FROM
                t_assets ta LEFT JOIN t_project tp ON tp.uuid = ta.project_uuid
                LEFT JOIN <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> tac on tac.uuid = ta.locker
            WHERE ta.id = #{id} AND !ta.is_deleted
        </if>
        <if test="versionNo != 0">
            SELECT
                ta.id, ta.uuid, ta.lock_time, ta.create_time, ta.update_time, ta.is_locked,
                tav.content, ta.name, ta.description, ta.type, ta.project_uuit, tp.name AS project_name,
                tac.realname AS lockerName, tac.uuid AS lovkerUuid
            FROM
                t_assets ta LEFT JOIN t_project tp ON tp.uuid = ta.project_uuid
                LEFT JOIN <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> tac on tac.uuid = ta.locker
                LEFT JOIN t_assets_version tav ON ta.uuid = tav.assets_uuid
            WHERE ta.id = #{id} AND tav.version_no = #{versionNo} AND !tav.is_dateted AND !ta.is_deleted
        </if>
    </select>

    <select id="selectTypeGroupByProjectUuid" resultType="java.lang.String">
        SELECT t.type
        FROM t_assets t
        WHERE t.project_uuid = #{projectUuid} AND t.type IS NOT NULL AND t.type != '' AND t.type != '${@com.beagledata.gaea.workbench.common.AssetsType@TEST_CASE}'
        GROUP BY type
    </select>

    <select id="selectByProjectUuid" resultMap="BaseResultMap">
        SELECT
            <include refid="Base_Column_List" />
        FROM t_assets t1
        WHERE !t1.is_deleted
            <if test="projectUuid != null and projectUuid != ''">
                AND t1.project_uuid = #{projectUuid}
            </if>
    </select>

    <select id="selectBomByProjectUuid" resultMap="BaseResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.is_locked, t1.type, t1.is_locked, t1.content
        FROM t_assets t1
        WHERE !t1.is_deleted
            AND project_uuid = #{projectUuid}
              AND (
                t1.type = 'fact'
                OR
                t1.type = 'constant'
              )
    </select>

    <select id="selectByIds" resultMap="BaseResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.is_locked, t1.content, t1.type
        FROM t_assets t1
        WHERE t1.id IN
            <foreach collection="collection" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
    </select>

    <select id="selectByUuids" resultMap="BaseResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.en_name, t1.is_locked, t1.content, t1.type
        FROM t_assets t1
        WHERE t1.uuid IN
            <foreach collection="collection" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
    </select>

    <select id="selectAssetsCountByUuids" resultType="int">
        SELECT count(1)
        FROM t_assets
        WHERE uuid IN
        <foreach collection="collection" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND !is_deleted
    </select>

    <select id="selectByUuidsAndVersion" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
            ta.id,
            ta.uuid,
            ta.name,
            ta.is_locked,
            ta.type,
            tav.id AS version_id,
            tav.content,
            tav.version_no
        FROM
            t_assets_version tav
            JOIN t_assets ta ON tav.assets_uuid = ta.uuid
        WHERE  !tav.is_deleted AND !ta.is_deleted
          AND
        <!--<foreach item="value" index="key" collection="mapData.entrySet()" open="(" separator=" OR " close=")">
            (tav.assets_uuid =#{key} AND tav.version_no=  #{value})
        </foreach>-->
        <foreach collection="collection" item="item" open="(" separator=" OR " close=")">
            (tav.assets_uuid =#{item.uuid} AND tav.version_no=  #{item.versionNo})
        </foreach>
    </select>

    <select id="selectLockInfo" resultMap="BaseResultMap">
        SELECT t1.uuid, t1.is_locked, t1.locker, t1.lock_time, t1.editor AS editor_uuid, t2.realname AS lockerName, t2.uuid AS lockerUuid
        FROM t_assets t1 LEFT JOIN <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> t2 ON t1.locker = t2.uuid
        WHERE t1.uuid = #{uuid}
    </select>

    <update id="updateLock">
        UPDATE t_assets
        <set>
            is_locked = #{isLock}, locker = #{locker}, lock_time = #{lockTime}, update_time = NOW()
            <if test="!isLock">
                <!-- 解锁把编辑人清空 -->
                ,editor = null, edit_time = null
            </if>
        </set>
        WHERE uuid = #{uuid}
    </update>

    <select id="assetsIsLocked" resultType="Boolean">
        SELECT is_locked FROM t_assets WHERE uuid = #{uuid}
    </select>

     <select id="selectAssertByParentId" resultMap="BaseResultMap">
        SELECT
          <include refid="Base_Column_List"/>, t1.dir_parent_id
        FROM t_assets t1
        WHERE !t1.is_deleted
            AND t1.dir_parent_id = #{param1}
            AND t1.project_uuid = #{param2}
            AND t1.type = #{param3}
    </select>

    <update id="deleteByDirParentId">
        UPDATE t_assets
        SET is_deleted = TRUE, update_time = NOW(), delete_version = id
        WHERE dir_parent_id = #{dirParentId} AND !is_locked
    </update>

    <select id="selectByParentId" resultMap="BaseResultMap">
        SELECT uuid, is_locked FROM t_assets WHERE dir_parent_id = #{dirParentId} AND !is_deleted
    </select>

    <select id="selectAsset" resultMap="BaseResultMap">
        SELECT * FROM t_assets
        WHERE name = #{name} AND type = #{type} AND project_uuid = #{projectUuid} AND !is_deleted
    </select>

    <select id="selectByAssetNameAndFolderName" resultMap="referenceResultMap" >
        SELECT
            ta.uuid,
            IF(tem1.dir_name='' OR tem1.dir_name = null, ta.NAME, CONCAT(tem1.dir_name, '/', ta.NAME)) name,
            ta.description,
            ta.type
        FROM
            (
            SELECT tem.assets_uuid, max(tem.dir_name) dir_name FROM (
                SELECT
                    tav.assets_uuid,
                    "" dir_name
                FROM
                    t_assets_version tav
                LEFT JOIN t_assets ta ON tav.assets_uuid = ta.uuid
                WHERE
                    ! tav.is_deleted
                AND ! ta.is_deleted
                AND ta.project_uuid = #{projectUuid}
                <if test="name != null and name != ''">
                    AND ta.NAME LIKE concat('%', #{name}, '%')
                </if>
                <if test="name != null and name != ''">
                    UNION
                    SELECT
                        tav.assets_uuid,
                        tf.dir_name
                    FROM
                        t_assets_version tav
                    LEFT JOIN t_assets ta ON tav.assets_uuid = ta.uuid
                    LEFT JOIN t_folder tf ON ta.dir_parent_id = tf.uuid
                    WHERE
                        !tav.is_deleted
                    AND !ta.is_deleted
                    AND !tf.is_deleted
                    AND ta.project_uuid = #{projectUuid}
                    AND tf.dir_name LIKE concat('%', #{name}, '%')
                </if>
            ) tem
            GROUP BY
                tem.assets_uuid
            ) tem1
        INNER JOIN t_assets ta ON ta.uuid = tem1.assets_uuid
    </select>

    <select id="selectByProject" resultMap="BaseResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.en_name, t1.description, t1.type, t1.dir_parent_id, t1.content
        FROM t_assets t1
        WHERE
          t1.project_uuid = #{projectUuid} AND !t1.is_deleted
    </select>

    <insert id="insertBatch">
        INSERT INTO t_assets (uuid, create_time, name, en_name, content, description, type, project_uuid, creator_uuid, dir_parent_id)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.uuid}, NOW(), #{item.name}, #{item.enName}, #{item.content}, #{item.description}, #{item.type}, #{item.projectUuid}, #{item.creator.uuid}, #{item.dirParentId})
        </foreach>;
    </insert>

    <insert id="insertVersionBatch">
        INSERT INTO t_assets_version (assets_uuid, create_time, content, version_desc, version_no, creator_uuid)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.assetUuid}, NOW(), #{item.content}, #{item.versionDes}, #{item.versionNo}, #{item.creator.uuid})
        </foreach>
    </insert>

    <select id="selectEditor" resultMap="BaseResultMap">
        SELECT t1.id, t2.uuid AS editor_uuid, t2.realname AS editor_realname, t1.edit_time
        FROM
            t_assets t1 LEFT JOIN
            <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> t2
            ON t1.editor = t2.uuid
        WHERE t1.uuid = #{uuid} AND !t1.is_deleted
    </select>

    <update id="updateEditor">
        <choose>
            <when test="lock"> <!-- 锁定指定用户指定uuid的资源 -->
                UPDATE t_assets SET editor = #{editor}, edit_time = NOW()
                WHERE !is_deleted AND uuid IN
                <foreach collection="assetsUuids" item="uuid" open="(" separator="," close=")">
                    #{uuid}
                </foreach>
            </when>
            <otherwise> <!-- 解锁资源文件 -->
                <choose>
                    <when test="editor == null or editor == ''"> <!-- 解锁所有资源文件 -->
                        UPDATE t_assets SET editor = null, edit_time = null
                        WHERE editor = #{editor} AND !is_deleted AND uuid IN
                        <foreach collection="assetsUuids" item="uuid" open="(" separator="," close=")">
                            #{uuid}
                        </foreach>
                    </when>
                    <otherwise> <!-- 解锁指定用户所有资源 -->
                        UPDATE t_assets SET editor = null, edit_time = null
                        WHERE editor = #{editor} AND !is_deleted
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </update>

    <insert id="insertNewVersion" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_assets_version (create_time, assets_uuid, content, version_no, version_desc, creator_uuid)
        VALUES (
            NOW(), #{uuid}, #{content},
            (
                SELECT v FROM (
                    SELECT IFNULL((SELECT version_no + 1 FROM t_assets_version WHERE assets_uuid = #{uuid} ORDER BY id DESC LIMIT 1), 1) AS v
                ) AS t
            ),
            #{versionDesc}, #{creator.uuid}
        )
    </insert>

    <select id="countVersions" resultType="int">
        SELECT COUNT(*) FROM t_assets_version WHERE assets_uuid = #{assetsUuid} AND !is_deleted
    </select>

    <select id="selectVersions" resultMap="BaseResultMap">
        SELECT t1.create_time, t1.assets_uuid AS uuid, t1.version_no, t1.version_desc, t2.realname AS user_realname
        FROM t_assets_version t1, <include refid="com.beagledata.gaea.workbench.mapper.UserMapper.union_users" /> t2
        WHERE t1.assets_uuid = #{param1} AND t1.creator_uuid = t2.uuid AND !t1.is_deleted
        ORDER BY t1.id DESC
        LIMIT #{param2}, #{param3}
    </select>

    <update id="deleteVersion">
        UPDATE t_assets_version
        SET update_time = NOW(), is_deleted = true, delete_version = id
        WHERE assets_uuid = #{uuid} AND version_no = #{versionNo}
    </update>

    <update id="updateFromVersion">
        UPDATE t_assets t1
        SET t1.content = (
          SELECT content FROM t_assets_version WHERE assets_uuid = #{uuid} AND version_no = #{versionNo} AND !is_deleted
        ), update_time = NOW()
        WHERE
            t1.uuid = #{uuid} AND !t1.is_deleted
            AND EXISTS (
              SELECT id FROM t_assets_version WHERE assets_uuid = #{uuid} AND version_no = #{versionNo} AND !is_deleted
            )
    </update>

    <select id="selectVersion" resultMap="BaseResultMap">
        SELECT
            t2.content, t1.type, t1.name, t2.version_no
        FROM
            t_assets t1 JOIN t_assets_version t2 ON t1.uuid = t2.assets_uuid
            LEFT JOIN t_recycle_bin trb ON t1.uuid = trb.assets_uuid AND t1.type = trb.assets_type
        WHERE t1.uuid = #{param1} AND t2.version_no = #{param2} AND (!t1.is_deleted OR (t1.is_deleted AND trb.uuid IS NOT null)) AND !t2.is_deleted
    </select>

    <select id="selectAssetsByProjectUuid" resultMap="BaseResultMap">
        SELECT
            id, uuid, name, description, content, type, project_uuid
        FROM
            t_assets
        WHERE
            project_uuid = #{projectUuid} AND !is_deleted AND type IN
        <foreach collection="types" item="type" open="(" separator="," close=")">
            #{type}
        </foreach>
    </select>

    <select id="getAssetsTreeNode" resultMap="assetsTreeNodeVO">
        SELECT
            uuid, leaf, label, type, locked, editor_uuid
        FROM
            (
            SELECT
                uuid, 1 AS leaf, name AS label, type, create_time, (!ISNULL(locker) AND locker != '') AS locked, editor editor_uuid
            FROM
                t_assets
            WHERE
                ! is_deleted
            <if test="projectUuid != null and projectUuid != ''">
                AND project_uuid = #{projectUuid}
            </if>
            <if test="parentUuid != null and parentUuid != ''">
                AND dir_parent_id = #{parentUuid}
            </if>
            <if test="type != null and type != ''">
                AND type = #{type}
            </if>
          UNION
            SELECT
                uuid, 0 AS leaf, dir_name label,category_name type,create_time, is_locked locked, null editor_uuid
            FROM
                t_folder
            WHERE
                ! is_deleted
                <if test="projectUuid != null and projectUuid != ''">
                    AND project_uuid = #{projectUuid}
                </if>
                <if test="parentUuid != null and parentUuid != ''">
                    AND parent_id = #{parentUuid}
                </if>
                <if test="type != null and type != ''">
                    AND category_name = #{type}
                </if>
            ) tem
        ORDER BY
            tem.create_time ASC;
    </select>

    <select id="selectVersionsByAssetsUuid" parameterType="java.lang.String" resultMap="assetsVersion">
        SELECT
            version_no,version_desc,create_time
        FROM t_assets_version
        WHERE assets_uuid = #{uuid} AND !is_deleted
        ORDER BY version_no DESC
    </select>

    <select id="selectVersionsByProjectUuid" parameterType="java.lang.String" resultMap="assetsVersion">
        SELECT t1.assets_uuid AS assetUuid,t1.assets_uuid AS assetsUuid, t1.content, t1.create_time, t1.creator_uuid, t1.id, t1.update_time, t1.version_desc, t1.version_no
        FROM t_assets_version t1, t_assets t2
        WHERE t2.project_uuid = #{projectUuid} AND t1.assets_uuid = t2.uuid AND !t1.is_deleted AND !t2.is_deleted AND t2.type NOT IN ('fact','constant')
    </select>

    <!-- 根据资源文件uuids查询所有版本文件 -->
    <select id="selectVersionsByUuids" parameterType="java.lang.String" resultMap="assetsVersion">
        SELECT t1.assets_uuid AS assetUuid,t1.assets_uuid AS assetsUuid, t1.content, t1.version_desc, t1.version_no
        FROM t_assets_version t1 join t_assets t2 ON t1.assets_uuid = t2.uuid
        WHERE !t2.is_deleted AND
            t1.assets_uuid IN
            <foreach collection="collection" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
             AND t2.type NOT IN ('fact','constant')
    </select>

    <!-- 根据文件夹uuid 查询 -->
    <select id="selectByParentIds" resultMap="BaseResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.is_locked, t1.content, t1.type, t1.editor editor_uuid
        FROM t_assets t1
        WHERE t1.dir_parent_id IN
            <foreach collection="collection" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
    </select>

    <!-- 根据多个文件uuid删除 -->
    <update id="deleteByUuids">
        UPDATE t_assets
        SET update_time = NOW(), is_deleted = true, delete_version = id
        WHERE uuid IN
            <foreach collection="collection" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
    </update>

    <select id="selectVersionById" resultMap="BaseResultMap">
        SELECT
            ta.uuid,
            ta.name,
            ta.type,
            tav.content,
            tav.version_no
        FROM
            t_assets_version tav
            JOIN t_assets ta ON tav.assets_uuid = ta.uuid
        WHERE tav.id = #{id}
    </select>

    <select id="selectAssetsByEnName" resultMap="BaseResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.en_name, t1.description, t1.type, t1.dir_parent_id, t1.content
        FROM t_assets t1
        WHERE
            t1.project_uuid = #{projectUuid} AND t1.en_name = #{enName} AND !t1.is_deleted
        LIMIT 1
    </select>

    <select id="selectFactAssetsByName" resultMap="BaseResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.en_name, t1.description, t1.type, t1.dir_parent_id, t1.content
        FROM t_assets t1
        WHERE
            t1.project_uuid = #{projectUuid} AND t1.name = #{name} AND !t1.is_deleted AND type ='fact'
        LIMIT 1
    </select>

    <select id="selectConstantByNameAndProject" resultMap="BaseResultMap">
        SELECT t1.id, t1.uuid, t1.name, t1.type, t1.dir_parent_id, t1.content,t1.project_uuid
        FROM t_assets t1
        WHERE
            t1.project_uuid = #{projectUuid} AND t1.name = #{name} AND !t1.is_deleted  and type ='constant'
        LIMIT 1
    </select>

    <update id="updateOnloadBaseline">
        UPDATE t_assets
        SET name = #{name}, conuent = #{content}, en_name = #{enName}, is_deleted = false, delete_version = 0
        WHERE
            uuid = #{uuid}
    </update>

    <select id="selectOnUploadBaseline" resultMap="BaseResultMap">
        SELECT *
        FROM t_assets
        WHERE uuid = #{uuid}
    </select>

    <insert id="insertVersion">
        INSERT INTO t_assets_version (create_time, assets_uuid, content, version_no, creator_uuid)
        VALUES (NOW(), #{assetsUuid}, #{content}, #{versionNo}, #{creator.uuid})
    </insert>

    <update id="updateVersionOnUploadBaseline">
        UPDATE t_assets_version
        SET is_deleted = false, delete_version = 0
        WHERE
            assets uuid = #{assetsUuid} AND version_no = #{versionNo}
    </update>

    <select id="selectVersionOnUploadBaseline" resultMap="assetsVersion">
        SELECT *
        FROM t_assets_version
        WHERE assets_uuid = #{assetsUuid} AND version_no = #{versionNo}
    </select>

    <select id="countNumByTypeForPrj" resultType="java.util.HashMap">
        SELECT `type`, count(type) as num FROM t_assets
        WHERE project_uuid= #{projectUuid} AND is_deleted=0 GROUP BY type
    </select>
</mapper>