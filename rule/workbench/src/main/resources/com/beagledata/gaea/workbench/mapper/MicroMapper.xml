<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beagledata.gaea.workbench.mapper.MicroMapper">
    <resultMap id="microResultMap" type="Micro">
        <id property="id" column="id" />
        <result property="uuid" column="uuid" />
        <result property="createTime" column="create_time" />
        <result property="packageUuid" column="package_uuid" />
        <result property="name" column="name" />
        <result property="description" column="description" />
        <result property="enable" column="is_enable" />
        <result property="packageName" column="packageName" />
        <result property="projectName" column="projectName" />
        <result property="projectCreatorName" column="project_creator_name" />
        <result property="approvalLabel" column="approval_label" />
        <result property="projectUuid" column="project_uuid" />
    </resultMap>

    <resultMap id="baselineResultMap" type="com.beagledata.gaea.workbench.entity.KnowledgePackageBaseline">
        <result property="packageUuid" column="package_uuid" />
        <result property="versionNo" column="version_no" />
    </resultMap>

    <select id="selectByUuid" resultMap="microResultMap">
        SELECT t1.id, t1.uuid, t1.create_time, t1.update_time, t1.package_uuid, t1.name, t1.description, t1.is_enable, t1.approval_label
        FROM t_micro t1 WHERE !t1.is_deleted and t1.uuid = #{uuid}
    </select>

    <select id="selectPage" resultMap="microResultMap">
        SELECT
            t1.id, t1.uuid, t1.create_time, t1.update_time, t1.package_uuid, t2.name AS packageName,
            t3.name AS projectName, t1.name, t1.description, t1.is_enable, t1.approval_label,
            t4.realname AS project_creator_name
        FROM t_micro t1
            LEFT JOIN t_knowledge_package t2 ON t2.uuid = t1.package_uuid
            LEFT JOIN t_project t3 ON t3.uuid = t1.project_uuid
            LEFT JOIN t_user t4 ON t4.uuid = t3.creator_uuid
        WHERE !t1.is_deleted
        <if test="micro != null">
            <if test="micro.name != null and micro.name != ''">
                AND (
                  t1.name LIKE CONCAT('%', #{micro.name}, '%')
                  OR t3.name LIKE CONCAT('%', #{micro.name}, '%')
                  OR t4.realname LIKE CONCAT('%', #{micro.name}, '%')
                )
            </if>
            <if test="micro.createTime != null">
                AND t1.create_time = #{micro.createTime}
            </if>
        </if>
        <if test="isAdmin == false">
            <choose>
                <when test="isOrgAdmin == false">
                    AND t3.creator_uuid = #{userUuid}
                </when>
                <otherwise>
                    AND t4.org_uuid = (SELECT t5.org_uuid FROM t_user t5 WHERE t5.uuid = #{userUuid})
                </otherwise>
            </choose>
        </if>
        ORDER BY t1.id DESC
        <if test="start != null and limit != null">
            LIMIT #{start}, #{limit}
        </if>
    </select>

    <select id="countTotal" resultType="int">
        SELECT COUNT(1)
        FROM t_micro t1
          LEFT JOIN t_project t2 ON t2.uuid = t1.project_uuid
          LEFT JOIN t_user t3 ON t3.uuid = t2.creator_uuid
        WHERE !t1.is_deleted
        <if test="micro != null">
            <if test="micro.name != null and micro.name != ''">
                AND (
                  t1.name LIKE CONCAT('%', #{micro.name}, '%')
                  OR t2.name LIKE CONCAT('%', #{micro.name}, '%')
                  OR t3.realname LIKE CONCAT('%', #{micro.name}, '%')
                )
            </if>
            <if test="micro.createTime != null">
                AND t1.create_time = #{micro.createTime}
            </if>
        </if>
        <if test="isAdmin == false">
            <choose>
                <when test="isOrgAdmin == false">
                    AND t2.creator_uuid = #{userUuid}
                </when>
                <otherwise>
                    AND t3.org_uuid = (SELECT t4.org_uuid FROM t_user t4 WHERE t4.uuid = #{userUuid})
                </otherwise>
            </choose>
        </if>
    </select>

    <select id="selectAll" resultMap="microResultMap">
        SELECT
            t1.uuid, t1.name
        FROM t_micro t1
            LEFT JOIN t_project t2 ON t2.uuid = t1.project_uuid
            LEFT JOIN t_user t3 ON t3.uuid = t2.creator_uuid
        WHERE !t1.is_deleted
        <if test="isAdmin == false">
            <choose>
                <when test="isOrg == false">
                    AND t2.creator_uuid = #{userUuid}
                </when>
                <otherwise>
                    AND t3.org_uuid = (SELECT t4.org_uuid FROM t_user t4 WHERE t4.uuid = #{userUuid})
                </otherwise>
            </choose>
        </if>
        ORDER BY t1.id DESC
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_micro (uuid, create_time, package_uuid,  name, description, project_uuid)
        VALUES (#{uuid}, NOW(), #{packageUuid},  #{name}, #{description}, #{projectUuid})
    </insert>

    <select id="countByPackageUuid" resultType="int">
        SELECT COUNT(1) FROM t_micro WHERE package_uuid = #{packageUuid} AND !is_deleted
    </select>

    <select id="selectMicroName" resultType="Integer">
        SELECT COUNT(1) FROM t_micro WHERE !is_deleted AND `NAME` = #{name}
    </select>

    <update id="updateEnable">
        UPDATE t_micro SET update_time = NOW(), is_enable = #{enable} WHERE uuid = #{uuid}
    </update>

    <update id="update">
        UPDATE t_micro SET update_time = NOW()
        <if test="name != null and name != ''">
            , name = #{name}
        </if>
         <if test="description != null and description != ''">
            , description = #{description}
        </if>
        <if test="approvalLabel != null and approvalLabel != ''">
            ,approval_label = #{approvalLabel}
        </if>
        WHERE !is_deleted  AND uuid = #{uuid}
    </update>

    <update id="updateDeleted">
        UPDATE t_micro
        SET update_time = NOW(), is_deleted = false , delete_version = 0
        WHERE package_uuid = #{packageUuid} AND is_deleted;
    </update>

    <update id="delete">
        UPDATE t_micro
        SET update_time = NOW(), is_deleted = true, delete_version = id
        WHERE uuid = #{uuid};
    </update>

    <insert id="insertType">
        INSERT INTO t_micro_type (uuid, create_time, name)
        VALUES (#{uuid},  NOW(), #{name})
    </insert>

    <update id="deleteType">
        UPDATE t_micro_type
        SET update_time = NOW(), is_deleted = true, delete_version = id
        WHERE uuid = #{uuid} and `name` != #{microTypeModel};
    </update>
    
    <select id="selectMicroByPackageUuid" resultMap="microResultMap">
        SELECT t1.uuid, t1.create_time, t1.name, t1.is_enable
        FROM t_micro t1 WHERE t1.package_uuid = #{packageUuid} AND !t1.is_deleted
    </select>

    <select id="selectByModel" resultMap="microResultMap">
        SELECT t1.uuid, t1.name, t1.is_enable
        FROM t_micro t1 JOIN t_micro_model t2 ON t1.uuid = t2.micro_uuid
        WHERE t2.model_uuid = #{modelUuid} AND !t1.is_deleted
    </select>

    <select id="selectByClient" resultMap="microResultMap">
        SELECT t1.uuid, t1.name
        FROM t_micro t1 JOIN t_client_micro t2 ON t1.uuid = t2.micro_uuid
        where t2.client_uuid = #{clientUuid} AND !t1.is_deleted
    </select>

    <select id="selectLeastBaseline" resultMap="baselineResultMap">
        SELECT t1.package_uuid package_uuid, t2.version_no version_no
        FROM t_micro t1 INNER JOIN t_knowledge_package_baseline t2 ON t1.package_uuid = t2.package_uuid
        WHERE t1.uuid = #{uuid}
        ORDER BY t2.version_no desc
        LIMIT 1
    </select>

    <select id="selectOnlineMicro" resultType="java.lang.String">
        SELECT
            t2.uuid
        FROM
            t_knowledge_package_baseline t1
        JOIN t_micro t2 ON t1.package_uuid = t2.package_uuid
        AND t1.state = 3 AND !t2.is_deleted
    </select>

    <select id="selectProjectUuidByMicroUuid" resultType="java.lang.String">
        SELECT
            t1.project_uuid
        FROM
            t_knowledge_package t1
        JOIN t_micro t2 ON t1.uuid = t2.package_uuid
        WHERE t2.uuid = #{microUuid}
    </select>

    <update id="deleteByPackageUuid">
        UPDATE t_micro
        SET update_time = NOW(), is_deleted = true , delete_version = id
        WHERE package_uuid = #{pkgUuid};
    </update>

    <update id="updateOnUploadBaseline">
        UPDATE t_micro
        SET name = #{name}, is_deleted = false, delete_version = 0
        WHERE
            uuid = #{uuid}
    </update>

    <select id="selectOnUploadBaseline" resultMap="microResultMap">
        SELECT *
        FROM t_micro
        WHERE uuid = #{uuid}
    </select>
</mapper>